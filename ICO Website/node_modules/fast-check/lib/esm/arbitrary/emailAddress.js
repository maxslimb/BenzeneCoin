import { array } from './array.js';
import { buildLowerAlphaNumericArbitrary } from './_internals/builders/CharacterRangeArbitraryBuilder.js';
import { domain } from './domain.js';
import { stringOf } from './stringOf.js';
import { tuple } from './tuple.js';
import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';
function dotMapper(a) {
    return a.join('.');
}
function dotUnmapper(value) {
    if (typeof value !== 'string') {
        throw new Error('Unsupported');
    }
    return value.split('.');
}
function atMapper(data) {
    return `${data[0]}@${data[1]}`;
}
function atUnmapper(value) {
    if (typeof value !== 'string') {
        throw new Error('Unsupported');
    }
    return value.split('@', 2);
}
export function emailAddress() {
    const others = ['!', '#', '$', '%', '&', "'", '*', '+', '-', '/', '=', '?', '^', '_', '`', '{', '|', '}', '~'];
    const atextArb = buildLowerAlphaNumericArbitrary(others);
    const localPartArb = convertFromNext(convertToNext(array(stringOf(atextArb, { minLength: 1, maxLength: 10 }), { minLength: 1, maxLength: 5 }))
        .map(dotMapper, dotUnmapper)
        .filter((lp) => lp.length <= 64));
    return convertFromNext(convertToNext(tuple(localPartArb, domain())).map(atMapper, atUnmapper));
}
